name: Build and Deploy Drive Clone

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: karan79/drive-clone
  DOCKER_TAG: latest

jobs:
  build-drive-clone:
    name: Build Drive Clone
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v3.14.1
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-version: 'wrapper'

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PAT }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  deploy-drive-clone:
    name: Deploy Drive Clone to EC2
    runs-on: ubuntu-latest
    needs: build-drive-clone

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo ${{ secrets.DOCKER_PAT }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

          docker stop drive-clone-app || true
          docker rm drive-clone-app || true

          docker rmi ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} || true

          docker pull ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

          docker run -d \
            --name drive-clone-app \
            -p 8081:8080 \
            --restart unless-stopped \
            -e SPRING_DATASOURCE_URL="${{ secrets.SUPABASE_JDBC_URL }}" \
            -e FIREBASE_CREDENTIALS_JSON='${{ secrets.FIREBASE_CREDENTIALS_JSON }}' \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

          docker image prune -f

          sleep 30
          curl -f http://localhost:8081/actuator/health || echo "Health check failed"
